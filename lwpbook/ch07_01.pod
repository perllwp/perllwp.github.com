=pod

^ Perl and LWP ^

=head1 Chapter 7. HTML Processing with Tokens

=head2 Contents:

HTML as Tokens

Basic HTML::TokeParser Use

Individual Tokens

Token Sequences

More HTML::TokeParser Methods

Using Extracted Text

Regular expressions are powerful, but they're a painfully low-level way
of dealing with HTML. You're forced to worry about spaces and newlines,
single and double quotes, HTML comments, and a lot more. The next step
up from a regular expression is an HTML tokenizer. In this chapter,
we'll use HTML::TokeParser to extract information from HTML files.
Using these techniques, you can extract information from any HTML file,
and never again have to worry about character-level trivia of HTML
markup.

=head2 7.1. HTML as Tokens

Your experience with HTML code probably involves seeing raw text such
as this:

 <p>Dear Diary,
 <br>I'm gonna be a superstar, because I'm learning to play
 the <a href="http://MyBalalaika.com">balalaika</a> &amp; the <a
 href='http://MyBazouki.com'>bazouki</a>!!!

The HTML::TokeParser module divides the HTML into units called
I<tokens>, which means units of parsing. The above source code is
parsed as this series of tokens:

=over

=item I<start-tag token>

C<p> with no attributes

=item I<text token>

C<Dear Diary,\n>

=item I<start-tag token>

C<br> with no attributes

=item I<text token>

C<I'm gonna be a superstar, because I'm learning to play\nthe>

=item I<start-tag token>

C<a>, with attribute C<href> whose value is C<http://MyBalalaika.com>

=item I<text token>

C<balalaika>

=item I<end-tag token>

C<a>

=item I<text token>

C<&amp; the> , which means C<& the>

=item I<start-tag token>

C<a>, with attribute C<href> equals C<http://MyBazouki.com>

=item I<text token>

C<bazouki>

=item I<end-tag token>

C<a>

=item I<text token>

C<!!!\n>

=back

This representation of things is more abstract, focusing on markup
concepts and not individual characters. So whereas the two
C<E<lt>aE<gt>> tags have different types of quotes around their
attribute values in the raw HTML, as tokens each has a start-tag of
type C<a>, with an C<href> attribute of a particular value. A program
that extracts information by working with a stream of tokens doesn't
have to worry about the idiosyncrasies of entity encoding, whitespace,
quotes, and trying to work out where a tag ends.

=cut

#Pod::HTML2Pod conversion notes:
#From file ch07_01.htm
# 4441 bytes of input
#Sun Nov 11 18:10:07 2012 root
# No a_name switch not specified, so will not try to render <a name='...'>
# Will try to render <a href='...'>
# Untranslatable link: "./index.html"
# Untranslatable link: "ch07_01.htm"
# Untranslatable link: "ch07_02.htm"
# Untranslatable link: "ch07_03.htm"
# Untranslatable link: "ch07_04.htm"
# Untranslatable link: "ch07_05.htm"
# Untranslatable link: "ch07_06.htm"
