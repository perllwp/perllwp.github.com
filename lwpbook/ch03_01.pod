=pod

^ Perl and LWP ^

=head1 Chapter 3. The LWP Class Model

=head2 Contents:

L<The Basic Classes|/perllwp-CHP-3-SECT-1>

Programming with LWP Classes

Inside the do_GET and do_POST Functions

User Agents

HTTP::Response Objects

LWP Classes: Behind the Scenes

For full access to every part of an HTTP transactionE<mdash>request
headers and body, response status line, headers and bodyE<mdash>you
have to go beyond LWP::Simple, to the object-oriented modules that form
the heart of the LWP suite. This chapter introduces the classes that
LWP uses to represent browser objects (which you use for making
requests) and response objects (which are the result of making a
request). You'll learn the basic mechanics of customizing requests and
inspecting responses, which we'll use in later chapters for cookies,
language selection, spidering, and more.

=head2 3.1. The Basic Classes

In LWP's object model, you perform GET, HEAD, and POST requests via a
browser object (a.k.a. a user agent object) of class LWP::UserAgent,
and the result is an HTTP response of the aptly named class
HTTP::Response. These are the two main classes, with other incidental
classes providing features such as cookie management and user agents
that act as spiders. Still more classes deal with non-HTTP aspects of
the Web, such as HTML. In this chapter, we'll deal with the classes
needed to perform web requests.

The classes can be loaded individually:

 use LWP::UserAgent;
 use HTTP::Response;

But it's easiest to simply use the LWP convenience class, which loads
LWP::UserAgent and HTTP::Response for you:

 use LWP;               # same as previous two lines

If you're familiar with object-oriented programming in Perl, the LWP
classes will hold few real surprises for you. All you need is to learn
the names of the basic classes and accessors. If you're not familiar
with object-oriented programming in any language, you have some
catching up to do. Appendix G, "User's View of Object-Oriented Modules"
will give you a bit of conceptual background on the object-oriented
approach to things. To learn more (including information on how to
write your own classes), check out I<Programming Perl
(http://www.oreilly.com/catalog/pperl3/)> (O'Reilly).

=cut

#Pod::HTML2Pod conversion notes:
#From file ch03_01.htm
# 3598 bytes of input
#Sun Nov 11 18:10:05 2012 root
# No a_name switch not specified, so will not try to render <a name='...'>
# Will try to render <a href='...'>
# Untranslatable link: "./index.html"
# Untranslatable link: "ch03_02.htm"
# Untranslatable link: "ch03_03.htm"
# Untranslatable link: "ch03_04.htm"
# Untranslatable link: "ch03_05.htm"
# Untranslatable link: "ch03_06.htm"
# Untranslatable link: "appg_01.htm"
